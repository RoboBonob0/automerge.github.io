"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3402],{5680:(e,t,r)=>{r.d(t,{xA:()=>c,yg:()=>d});var o=r(6540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),l=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=l(r),g=n,d=m["".concat(s,".").concat(g)]||m[g]||u[g]||a;return r?o.createElement(d,i(i({ref:t},c),{},{components:r})):o.createElement(d,i({ref:t},c))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=g;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[m]="string"==typeof e?e:n,i[1]=p;for(var l=2;l<a;l++)i[l]=r[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}g.displayName="MDXCreateElement"},8939:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var o=r(8168),n=(r(6540),r(5680));const a={},i="Repositories",p={unversionedId:"repositories/index",id:"repositories/index",title:"Repositories",description:"@automerge/automerge provides a JSON-like CRDT and a sync protocol, but this still leaves a lot of plumbing to do to use it in an application. @automerge/automerge-repo is that plumbing.",source:"@site/docs/repositories/index.md",sourceDirName:"repositories",slug:"/repositories/",permalink:"/docs/repositories/",draft:!1,editUrl:"https://github.com/automerge/automerge.github.io/edit/main/docs/repositories/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Conflicts",permalink:"/docs/documents/conflicts"},next:{title:"Storage",permalink:"/docs/repositories/storage"}},s={},l=[],c={toc:l},m="wrapper";function u(e){let{components:t,...r}=e;return(0,n.yg)(m,(0,o.A)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"repositories"},"Repositories"),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"@automerge/automerge")," provides a JSON-like CRDT and a sync protocol, but this still leaves a lot of plumbing to do to use it in an application. ",(0,n.yg)("a",{parentName:"p",href:"https://www.npmjs.com/package/@automerge/automerge-repo"},(0,n.yg)("inlineCode",{parentName:"a"},"@automerge/automerge-repo"))," is that plumbing."),(0,n.yg)("p",null,"The entry point for an ",(0,n.yg)("inlineCode",{parentName:"p"},"automerge-repo")," based application is to create a ",(0,n.yg)("a",{parentName:"p",href:"https://automerge.org/automerge-repo/classes/_automerge_automerge_repo.Repo.html"},(0,n.yg)("inlineCode",{parentName:"a"},"Repo")),", passing it some form of ",(0,n.yg)("a",{parentName:"p",href:"https://automerge.org/automerge-repo/classes/_automerge_automerge_repo.StorageAdapter.html"},(0,n.yg)("inlineCode",{parentName:"a"},"StorageAdapter"))," - which knows how to save data locally - and zero or more ",(0,n.yg)("a",{parentName:"p",href:"https://automerge.org/automerge-repo/classes/_automerge_automerge_repo.NetworkAdapter.html"},(0,n.yg)("inlineCode",{parentName:"a"},"NetworkAdapter")),"s, which know how to talk to other peers running ",(0,n.yg)("inlineCode",{parentName:"p"},"automerge-repo"),"."),(0,n.yg)("p",null,"For example, this snippet creates a ",(0,n.yg)("inlineCode",{parentName:"p"},"Repo")," which listens for websocket connections and stores data in the local file system:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},'import { Repo } from "@automerge/automerge-repo"\nimport { WebSocketServer } from "ws"\nimport { NodeWSServerAdapter } from "@automerge/automerge-repo-network-websocket"\nimport { NodeFSStorageAdapter } from "@automerge/automerge-repo-storage-nodefs"\n\nconst wss = new WebSocketServer({ noServer: true })\n\nconst repo = new Repo({\n  network: [new NodeWSServerAdapter(wss)],\n  storage: new NodeFSStorageAdapter(dir),\n})\n')),(0,n.yg)("p",null,"A ",(0,n.yg)("inlineCode",{parentName:"p"},"Repo")," is a little like a database. It allows you to create and request ",(0,n.yg)("a",{parentName:"p",href:"https://automerge.org/automerge-repo/classes/_automerge_automerge_repo.DocHandle.html"},(0,n.yg)("inlineCode",{parentName:"a"},"DocHandle")),"s. Once you have a ",(0,n.yg)("inlineCode",{parentName:"p"},"DocHandle")," you can make changes to it and listen for changes received from other peers."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},'let doc = repo.create()\n// Make a change ourselves and send that to everyone else\ndoc.change(d => d.text = "hello world")\n// Listen for changes from other peers\ndoc.on("change", ({ doc }) => {\n  console.log("new text is ", doc.text)\n})\n')),(0,n.yg)("p",null,"Any changes you make - or which are received from the network - will be stored in the attached storage adapter and distributed to other peers"))}u.isMDXComponent=!0}}]);