"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8409],{5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>g});var r=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,g=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(g,c(c({ref:t},u),{},{components:n})):r.createElement(g,c({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:o,c[1]=i;for(var l=2;l<a;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9648:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=n(8168),o=(n(6540),n(5680));const a={sidebar_position:4},c="Text",i={unversionedId:"documents/text",id:"documents/text",title:"Text",description:"Automerge.Text provides support for collaborative text editing. Under the hood, text is",source:"@site/docs/documents/text.md",sourceDirName:"documents",slug:"/documents/text",permalink:"/docs/documents/text",draft:!1,editUrl:"https://github.com/automerge/automerge.github.io/edit/main/docs/documents/text.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Lists",permalink:"/docs/documents/lists"},next:{title:"Conflicts",permalink:"/docs/documents/conflicts"}},s={},l=[],u={toc:l},d="wrapper";function p(e){let{components:t,...n}=e;return(0,o.yg)(d,(0,r.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"text"},"Text"),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"Automerge.Text")," provides support for collaborative text editing. Under the hood, text is\nrepresented as a list of characters, which is edited by inserting or deleting individual characters.\nCompared to using a regular JavaScript array, ",(0,o.yg)("inlineCode",{parentName:"p"},"Automerge.Text")," offers better performance."),(0,o.yg)("p",null,"You can create a Text object inside a change callback. Then you can use ",(0,o.yg)("inlineCode",{parentName:"p"},"insertAt()")," and\n",(0,o.yg)("inlineCode",{parentName:"p"},"deleteAt()")," to insert and delete characters (same API as for list modifications, shown\n",(0,o.yg)("a",{parentName:"p",href:"#updating-a-document"},"above"),"):"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},'newDoc = Automerge.change(currentDoc, (doc) => {\n  doc.text = new Automerge.Text();\n  doc.text.insertAt(0, "h", "e", "l", "l", "o");\n  doc.text.deleteAt(0);\n  doc.text.insertAt(0, "H");\n});\n')),(0,o.yg)("p",null,"To inspect a text object and render it, you can use the following methods (outside of a change\ncallback):"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"newDoc.text.length; // returns 5, the number of characters\nnewDoc.text.get(0); // returns 'H', the 0th character in the text\nnewDoc.text.toString(); // returns 'Hello', the concatenation of all characters\nfor (let char of newDoc.text) console.log(char); // iterates over all characters\n")),(0,o.yg)("p",null,"To figure out which regions were inserted by which users, you can use the elementId. The ElementID gives is a string of the form ",(0,o.yg)("inlineCode",{parentName:"p"},"${actorId}@${counter}"),". Here, actorId is the ID of the actor who inserted that character."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"let elementId = newDoc.text.getElemId(index);\n// '2@369125d35a934292b6acb580e31f3613'\n")),(0,o.yg)("p",null,"Note that the actorId changes with each call to ",(0,o.yg)("inlineCode",{parentName:"p"},"Automerge.init()"),"."))}p.isMDXComponent=!0}}]);