"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5975],{5680:(e,r,t)=>{t.d(r,{xA:()=>c,yg:()=>u});var n=t(6540);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=n.createContext({}),l=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},c=function(e){var r=l(e.components);return n.createElement(p.Provider,{value:r},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),g=l(t),d=a,u=g["".concat(p,".").concat(d)]||g[d]||m[d]||o;return t?n.createElement(u,s(s({ref:r},c),{},{components:t})):n.createElement(u,s({ref:r},c))}));function u(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var p in r)hasOwnProperty.call(r,p)&&(i[p]=r[p]);i.originalType=e,i[g]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2985:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=t(8168),a=(t(6540),t(5680));const o={sidebar_position:2},s="Networking",i={unversionedId:"repositories/networking",id:"repositories/networking",title:"Networking",description:"There are many ways to talk to other peers. In automerge-repo this is captured by the NetworkAdapter interface. Unlike StorageAdapters a repository can have many (or zero) NetworkAdapters.",source:"@site/docs/repositories/networking.md",sourceDirName:"repositories",slug:"/repositories/networking",permalink:"/docs/repositories/networking",draft:!1,editUrl:"https://github.com/automerge/automerge.github.io/edit/main/docs/repositories/networking.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Storage",permalink:"/docs/repositories/storage"},next:{title:"DocHandles",permalink:"/docs/repositories/dochandles"}},p={},l=[{value:"Websockets",id:"websockets",level:2},{value:"Server",id:"server",level:3},{value:"Usage with <code>express</code>",id:"usage-with-express",level:4},{value:"Client",id:"client",level:3},{value:"MessageChannel",id:"messagechannel",level:2},{value:"BroadcastChannel",id:"broadcastchannel",level:2}],c={toc:l},g="wrapper";function m(e){let{components:r,...t}=e;return(0,a.yg)(g,(0,n.A)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"networking"},"Networking"),(0,a.yg)("p",null,"There are many ways to talk to other peers. In ",(0,a.yg)("inlineCode",{parentName:"p"},"automerge-repo")," this is captured by the ",(0,a.yg)("a",{parentName:"p",href:"https://automerge.org/automerge-repo/classes/_automerge_automerge_repo.NetworkAdapter.html"},(0,a.yg)("inlineCode",{parentName:"a"},"NetworkAdapter"))," interface. Unlike ",(0,a.yg)("inlineCode",{parentName:"p"},"StorageAdapter"),"s a repository can have many (or zero) ",(0,a.yg)("inlineCode",{parentName:"p"},"NetworkAdapter"),"s."),(0,a.yg)("p",null,'"network" is quite a broad term in ',(0,a.yg)("inlineCode",{parentName:"p"},"automerge-repo"),'. It really means "any other instance of ',(0,a.yg)("inlineCode",{parentName:"p"},"Repo"),' which I am communicating with by message passing". This means that as well as network adapters for obvious things like websockets, we also implement network adapters for less traditional channels such as ',(0,a.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel"},(0,a.yg)("inlineCode",{parentName:"a"},"MessageChannel"))," or ",(0,a.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel"},(0,a.yg)("inlineCode",{parentName:"a"},"BroadcastChannel")),"."),(0,a.yg)("h2",{id:"websockets"},"Websockets"),(0,a.yg)("p",null,"The websocket ",(0,a.yg)("inlineCode",{parentName:"p"},"NetworkAdapter")," has two parts. This is because the websocket protocol requires a server and a client. The parts are named ",(0,a.yg)("inlineCode",{parentName:"p"},"NodeWSServerAdapter")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"BrowserWebsocketClientAdapter"),", but don't take these names too seriously, they will both work in a browser or in Node."),(0,a.yg)("h3",{id:"server"},"Server"),(0,a.yg)("p",null,"The server side of the adapter is ",(0,a.yg)("a",{parentName:"p",href:"https://automerge.org/automerge-repo/classes/_automerge_automerge_repo_network_websocket.NodeWSServerAdapter.html"},(0,a.yg)("inlineCode",{parentName:"a"},"NodeWSServerAdapter")),", which should be used in combination with the ",(0,a.yg)("a",{parentName:"p",href:"https://www.npmjs.com/package/ws"},(0,a.yg)("inlineCode",{parentName:"a"},"ws"))," library."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'import { WebSocketServer } from "ws";\nimport { NodeWSServerAdapter } from "@automerge/automerge-repo-network-websocket";\n\nconst wss = new WebSocketServer({ port: 8080 });\nconst adapter = new NodeWSServerAdapter(wss);\n')),(0,a.yg)("h4",{id:"usage-with-express"},"Usage with ",(0,a.yg)("inlineCode",{parentName:"h4"},"express")),(0,a.yg)("p",null,"Often you aren't running the websocket server as a standalone thing but instead as part of an existing HTTP server. Here's an example of such a situation in an ",(0,a.yg)("inlineCode",{parentName:"p"},"express")," app."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'import { WebSocketServer } from "ws";\nimport { NodeWSServerAdapter } from "@automerge/automerge-repo-network-websocket";\nimport express from "express";\n\nconst wss = new WebSocketServer({ noServer: true });\nconst server = express();\nserver.on("upgrade", (request, socket, head) => {\n  wss.handleUpgrade(request, socket, head, (socket) => {\n    wss.emit("connection", socket, request);\n  });\n});\nconst adapter = new NodeWSServerAdapter(wss);\nserver.listen(8080);\n')),(0,a.yg)("h3",{id:"client"},"Client"),(0,a.yg)("p",null,"The client side of the connection is ",(0,a.yg)("a",{parentName:"p",href:"https://automerge.org/automerge-repo/classes/_automerge_automerge_repo_network_websocket.BrowserWebSocketClientAdapter.html"},(0,a.yg)("inlineCode",{parentName:"a"},"BrowserWebsocketClientAdapter")),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'import { BrowserWebSocketClientAdapter } from "@automerge/automerge-repo-network-websocket";\n\nconst network = new BrowserWebSocketClientAdapter("ws://localhost:3030");\n')),(0,a.yg)("h2",{id:"messagechannel"},"MessageChannel"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://automerge.org/automerge-repo/modules/_automerge_automerge_repo_network_messagechannel.html"},(0,a.yg)("inlineCode",{parentName:"a"},"@automerge/automerge-repo-network-messagechannel"))," is a ",(0,a.yg)("inlineCode",{parentName:"p"},"NetworkAdapter")," for communicating between processes within the same browser using a ",(0,a.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel"},(0,a.yg)("inlineCode",{parentName:"a"},"MessageChannel")),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'import { MessageChannelNetworkAdapter } from "@automerge/automerge-repo-network-messagechannel";\nimport { Repo } from "@automerge/automerge-repo";\n\nconst { port1: leftToRight, port2: rightToLeft } = new MessageChannel();\nconst rightToLeft = new MessageChannelNetworkAdapter(rightToLeft);\nconst leftToRight = new MessageChannelNetworkAdapter(leftToRight);\n\nconst left = new Repo({\n  network: [leftToRight],\n});\nconst right = new Repo({\n  network: [rightToLeft],\n});\n')),(0,a.yg)("h2",{id:"broadcastchannel"},"BroadcastChannel"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://automerge.org/automerge-repo/modules/_automerge_automerge_repo_network_broadcastchannel.html"},(0,a.yg)("inlineCode",{parentName:"a"},"@automerge/automerge-repo-network-broadcastchannel"))," is a ",(0,a.yg)("inlineCode",{parentName:"p"},"NetworkAdapter")," for commuicating between processes in the same browser using a ",(0,a.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel"},(0,a.yg)("inlineCode",{parentName:"a"},"BroadcastChannel")),". This will in general be quite inefficient because the sync protocol is point-to-point so even though ",(0,a.yg)("inlineCode",{parentName:"p"},"BroadcastChannel")," is a ",(0,a.yg)("em",{parentName:"p"},"broadcast")," channel, we still have to duplicate each message for every peer in the channel. It's better to use ",(0,a.yg)("inlineCode",{parentName:"p"},"MessageChannel")," if you can, but ",(0,a.yg)("inlineCode",{parentName:"p"},"BroadcastChannel")," is good in a pinch."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'import { BroadcastChannelNetworkAdapter } from "@automerge/automerge-repo-network-broadcastchannel";\n\nconst network = new BroadcastChannelNetworkAdapter();\n')))}m.isMDXComponent=!0}}]);