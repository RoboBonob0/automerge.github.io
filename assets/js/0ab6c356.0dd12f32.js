"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8409],{5204:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>d});var o=n(4848),r=n(8453);const c={sidebar_position:4},s="Text",i={id:"documents/text",title:"Text",description:"Automerge.Text provides support for collaborative text editing. Under the hood, text is",source:"@site/docs/documents/text.md",sourceDirName:"documents",slug:"/documents/text",permalink:"/docs/documents/text",draft:!1,unlisted:!1,editUrl:"https://github.com/automerge/automerge.github.io/edit/main/docs/documents/text.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Lists",permalink:"/docs/documents/lists"},next:{title:"Conflicts",permalink:"/docs/documents/conflicts"}},a={},d=[];function l(e){const t={a:"a",code:"code",h1:"h1",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"text",children:"Text"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"Automerge.Text"})," provides support for collaborative text editing. Under the hood, text is\nrepresented as a list of characters, which is edited by inserting or deleting individual characters.\nCompared to using a regular JavaScript array, ",(0,o.jsx)(t.code,{children:"Automerge.Text"})," offers better performance."]}),"\n",(0,o.jsxs)(t.p,{children:["You can create a Text object inside a change callback. Then you can use ",(0,o.jsx)(t.code,{children:"insertAt()"})," and\n",(0,o.jsx)(t.code,{children:"deleteAt()"})," to insert and delete characters (same API as for list modifications, shown\n",(0,o.jsx)(t.a,{href:"#updating-a-document",children:"above"}),"):"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:'newDoc = Automerge.change(currentDoc, (doc) => {\n  doc.text = new Automerge.Text();\n  doc.text.insertAt(0, "h", "e", "l", "l", "o");\n  doc.text.deleteAt(0);\n  doc.text.insertAt(0, "H");\n});\n'})}),"\n",(0,o.jsx)(t.p,{children:"To inspect a text object and render it, you can use the following methods (outside of a change\ncallback):"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"newDoc.text.length; // returns 5, the number of characters\nnewDoc.text.get(0); // returns 'H', the 0th character in the text\nnewDoc.text.toString(); // returns 'Hello', the concatenation of all characters\nfor (let char of newDoc.text) console.log(char); // iterates over all characters\n"})}),"\n",(0,o.jsxs)(t.p,{children:["To figure out which regions were inserted by which users, you can use the elementId. The ElementID gives is a string of the form ",(0,o.jsx)(t.code,{children:"${actorId}@${counter}"}),". Here, actorId is the ID of the actor who inserted that character."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"let elementId = newDoc.text.getElemId(index);\n// '2@369125d35a934292b6acb580e31f3613'\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Note that the actorId changes with each call to ",(0,o.jsx)(t.code,{children:"Automerge.init()"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var o=n(6540);const r={},c=o.createContext(r);function s(e){const t=o.useContext(c);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(c.Provider,{value:t},e.children)}}}]);